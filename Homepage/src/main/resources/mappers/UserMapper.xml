<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mappers.UserMapper">

	<!-- resultMap 에 id 값을 사용한다. -->
	<resultMap id="UserMap" type="User">
		<result property="userId" column="user_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userPassword" column="user_password" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userNumber" column="user_number" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userName" column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userEmail" column="user_email" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userRole" column="user_role" javaType="java.lang.String" jdbcType="VARCHAR"/>
		<result property="userCreatedAt" column="user_created_at" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="userUpdatedAt" column="user_updated_at" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="userIsEnabled" column="user_is_enabled" javaType="java.lang.Boolean" jdbcType="TINYINT"/>
		<result property="userIsDeleted" column="user_is_deleted" javaType="java.lang.Boolean" jdbcType="TINYINT"/>
	</resultMap>

	<!-- INSERT 작업                                                                                                    INSERT 작업 -->
	<!-- 계정 등록 -->
	<insert id="insertUser" parameterType="User">
		INSERT
		INTO user (user_id, user_password, user_number, user_name, user_email)
		VALUES (#{userId}, #{userPassword}, #{userNumber}, #{userName}, #{userEmail})
	</insert>


	<!-- SELECT 작업                                                                                                    SELECT 작업 -->
	<!-- 전체 계정 개수 조회 -->
	<select id="countAllUser" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM user
    </select>

	<!-- 계정 목록 조회 -->
	<select id="selectUserList" parameterType="int" resultMap="UserMap">
		SELECT *
        FROM user
        ORDER BY user_created_at DESC
        LIMIT #{pageStart}, #{perPageNum}
	</select>

	<!-- 로그인 및 계정 상세 조회 -->
	<select id="selectUser" parameterType="map" resultMap="UserMap">
		SELECT *
		FROM user
		<choose>
			<when test="isLogin == true">WHERE user_id = #{user.userId} AND user_password = #{user.userPassword}</when>
			<otherwise>WHERE user_id = #{user.userId}</otherwise>
		</choose>
    </select>

	<!-- ID 중복 검사 -->
	<select id="countUserByUserId" parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM user
		WHERE user_id = #{userId}
    </select>

	<!-- 학번 중복 검사 -->
	<select id="countUserByUserNumber" parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM user
		WHERE user_number = #{userNumber}
    </select>

	<!-- 이메일 중복 검사 -->
	<select id="countUserByUserEmail" parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM user
		WHERE user_email = #{userEmail}
    </select>


	<!-- UPDATE 작업                                                                                                    UPDATE 작업 -->
	<!-- 로그인 일자 수정 -->
	<update id="updateUserUpdatedAt" parameterType="string">
		UPDATE user
		SET user_updated_at = now()
		WHERE user_id = #{userId}
    </update>

	<!-- 계정 정보 수정 -->
	<update id="updateUser" parameterType="User">
		UPDATE user
		SET user_name = #{userName}, user_number = #{userNumber}, user_email = #{userEmail}
		WHERE user_id = #{userId}
    </update>

	<!-- 이름 수정 -->
	<update id="updateUserName" parameterType="User">
		UPDATE user
		SET user_name = #{userName}
		WHERE user_id = #{userId}
    </update>

	<!-- 학번 수정 -->
	<update id="updateUserNumber" parameterType="User">
		UPDATE user
		SET user_number = #{userNumber}
		WHERE user_id = #{userId}
    </update>

	<!-- 이메일 수정 -->
	<update id="updateUserEmail" parameterType="User">
		UPDATE user
		SET user_email = #{userEmail}
		WHERE user_id = #{userId}
    </update>

	<!-- 비밀번호 수정 -->
	<update id="updateUserPassword" parameterType="User">
		UPDATE user
		SET user_password = #{userPassword}
		WHERE user_id = #{userId}
    </update>

	<!-- 계정 활성 수정 -->
	<update id="updateUserIsEnabled" parameterType="User">
		UPDATE user
		SET user_is_enabled = #{userIsEnabled}
		WHERE user_id = #{userId}
	</update>

	<!-- 계정 삭제 수정 -->
	<update id="updateUserIsDeleted" parameterType="map">
		UPDATE user
		SET user_is_deleted = #{user.userIsDeleted}
		<choose>
			<when test="isAdmin == true">WHERE user_id = #{user.userId}</when>
			<otherwise>WHERE user_id = #{user.userId} AND user_password = #{user.userPassword}</otherwise>
		</choose>
	</update>


	<!-- DELETE 작업                                                                                                    DELETE 작업 -->

</mapper>