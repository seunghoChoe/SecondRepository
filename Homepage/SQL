- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

* MySQL 8 기준 - DDL/DML

create database homepage; (<-> drop database homepage;)
use homepage;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

* 사용자 Table

CREATE TABLE users
(
    `u_id`		   VARCHAR(20)   NOT NULL    PRIMARY KEY                 COMMENT '계정 ID',
    `u_pw`         VARCHAR(75)   NOT NULL    				             COMMENT '계정 비밀번호',
    `u_sno`        VARCHAR(20)   NOT NULL    UNIQUE		                 COMMENT '사용자 학번',
    `u_name`       VARCHAR(20)   NOT NULL    				             COMMENT '사용자 이름',
    `u_email`      VARCHAR(30)   NOT NULL    UNIQUE		                 COMMENT '사용자 이메일',
    `u_reg_date`   TIMESTAMP     NULL        DEFAULT CURRENT_TIMESTAMP	 COMMENT '계정 가입 일자',
    `u_log_date`   TIMESTAMP     NULL        				             COMMENT '계정 로그인 일자',
    `u_enabled`    TINYINT(1)    NOT NULL    DEFAULT '0' 	             COMMENT '계정 활성 여부',
    `u_authority`  VARCHAR(20)   NOT NULL    DEFAULT 'USER'              COMMENT '계정 권한'
);

* 테스트 계정 추가하기

INSERT INTO users VALUES ('admin1', 'test123!', '10000001', '관리자', 'admin1@mju.ac.kr', now(), now(), true, 'ADMIN');
INSERT INTO users VALUES ('user1', 'test123!', '60000001', '사용자', 'user1@mju.ac.kr', now(), now(), true, 'USER');
INSERT INTO users VALUES ('user2', 'test123!', '60000002', '사용자', 'user2@mju.ac.kr', now(), now(), true, 'USER');
INSERT INTO users VALUES ('user3', 'test123!', '60000003', '사용자', 'user3@mju.ac.kr', now(), now(), true, 'USER');
INSERT INTO users VALUES ('user4', 'test123!', '60000004', '사용자', 'user4@mju.ac.kr', now(), now(), true, 'USER');
INSERT INTO users VALUES ('user5', 'test123!', '60000005', '사용자', 'user5@mju.ac.kr', now(), now(), true, 'USER');

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

* 게시판 Table

CREATE TABLE boards
(
    `b_idx`            INT             NOT NULL    PRIMARY KEY                 AUTO_INCREMENT   COMMENT '게시물 번호',
    `b_hit`            INT             NOT NULL    DEFAULT 0                                    COMMENT '게시물 조회수',
    `b_create_date`    TIMESTAMP       NOT NULL    DEFAULT CURRENT_TIMESTAMP                    COMMENT '게시물 작성일',
    `b_update_date`    TIMESTAMP       NULL                                                     COMMENT '게시물 변경일',
    `b_like`           INT             NOT NULL    DEFAULT 0                                    COMMENT '게시물 좋아요',
    `b_title`          VARCHAR(100)    NOT NULL                                                 COMMENT '게시물 제목',
    `b_content`        VARCHAR(2500)   NOT NULL                                                 COMMENT '게시물 내용',
    `b_notice`         TINYINT(1)      NOT NULL    DEFAULT 0                                    COMMENT '공지사항 여부',
    `b_author`         VARCHAR(20)     NOT NULL                                                 COMMENT '게시물 작성자 ID'
);

ALTER TABLE boards ADD CONSTRAINT UID_BOARDS_FK_0 FOREIGN KEY (b_author) REFERENCES users (u_id) ON UPDATE CASCADE ON DELETE CASCADE;

INSERT INTO boards (b_title, b_content, b_author) VALUES ('admin1 의 테스트 글 [1]', 'admin1 의 테스트 글 [1]', 'admin1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('admin1 의 테스트 글 [2]', 'admin1 의 테스트 글 [2]', 'admin1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('admin1 의 테스트 글 [3]', 'admin1 의 테스트 글 [3]', 'admin1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('admin1 의 테스트 글 [4]', 'admin1 의 테스트 글 [4]', 'admin1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('admin1 의 테스트 글 [5]', 'admin1 의 테스트 글 [5]', 'admin1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user1 의 테스트 글 [1]', 'user1 의 테스트 글 [1]', 'user1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user1 의 테스트 글 [2]', 'user1 의 테스트 글 [2]', 'user1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user1 의 테스트 글 [3]', 'user1 의 테스트 글 [3]', 'user1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user1 의 테스트 글 [4]', 'user1 의 테스트 글 [4]', 'user1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user1 의 테스트 글 [5]', 'user1 의 테스트 글 [5]', 'user1');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user2 의 테스트 글 [1]', 'user2 의 테스트 글 [1]', 'user2');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user2 의 테스트 글 [2]', 'user2 의 테스트 글 [2]', 'user2');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user2 의 테스트 글 [3]', 'user2 의 테스트 글 [3]', 'user2');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user2 의 테스트 글 [4]', 'user2 의 테스트 글 [4]', 'user2');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user2 의 테스트 글 [5]', 'user2 의 테스트 글 [5]', 'user2');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user3 의 테스트 글 [1]', 'user3 의 테스트 글 [1]', 'user3');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user3 의 테스트 글 [2]', 'user3 의 테스트 글 [2]', 'user3');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user3 의 테스트 글 [3]', 'user3 의 테스트 글 [3]', 'user3');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user3 의 테스트 글 [4]', 'user3 의 테스트 글 [4]', 'user3');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user3 의 테스트 글 [5]', 'user3 의 테스트 글 [5]', 'user3');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user4 의 테스트 글 [1]', 'user4 의 테스트 글 [1]', 'user4');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user4 의 테스트 글 [2]', 'user4 의 테스트 글 [2]', 'user4');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user4 의 테스트 글 [3]', 'user4 의 테스트 글 [3]', 'user4');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user4 의 테스트 글 [4]', 'user4 의 테스트 글 [4]', 'user4');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user4 의 테스트 글 [5]', 'user4 의 테스트 글 [5]', 'user4');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user5 의 테스트 글 [1]', 'user5 의 테스트 글 [1]', 'user5');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user5 의 테스트 글 [2]', 'user5 의 테스트 글 [2]', 'user5');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user5 의 테스트 글 [3]', 'user5 의 테스트 글 [3]', 'user5');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user5 의 테스트 글 [4]', 'user5 의 테스트 글 [4]', 'user5');
INSERT INTO boards (b_title, b_content, b_author) VALUES ('user5 의 테스트 글 [5]', 'user5 의 테스트 글 [5]', 'user5');

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

* 댓글 Table

CREATE TABLE board_comments
(
    `c_board`          INT             NOT NULL                                                  COMMENT '게시물 번호',
    `c_idx`            INT             NOT NULL    PRIMARY KEY                  AUTO_INCREMENT   COMMENT '댓글 번호',
    `c_create_date`    TIMESTAMP       NOT NULL    DEFAULT CURRENT_TIMESTAMP                     COMMENT '댓글 작성일',
    `c_update_date`    TIMESTAMP       NULL                                                      COMMENT '댓글 변경일',
    `c_like`           INT             NOT NULL    DEFAULT 0                                     COMMENT '댓글 좋아요',
    `c_content`        VARCHAR(500)    NOT NULL                                                  COMMENT '댓글 내용',
    `c_author`         VARCHAR(20)     NOT NULL                                                  COMMENT '댓글 작성자'
);

ALTER TABLE board_comments ADD CONSTRAINT UID_COMMENTS_FK_0 FOREIGN KEY (c_board) REFERENCES boards (b_idx) ON UPDATE CASCADE ON DELETE CASCADE;

INSERT INTO board_comments (c_board, c_create_date, c_update_date, c_content, c_author) VALUES (68, now(), now(), '댓글 테스트1', 'admin1');
INSERT INTO board_comments (c_board, c_create_date, c_update_date, c_content, c_author) VALUES (68, now(), now(), '댓글 테스트2', 'admin1');
INSERT INTO board_comments (c_board, c_create_date, c_update_date, c_content, c_author) VALUES (68, now(), now(), '댓글 테스트3', 'admin1');

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

* 게시글 좋아요 Table (좋아요 취소 시, 레코드 삭제)

CREATE TABLE board_likes
(
    `l_board`     INT              NOT NULL      COMMENT '좋아요를 한 게시글 번호',
    `l_user`      VARCHAR(20)      NOT NULL      COMMENT '좋아요를 한 사용자'
);

ALTER TABLE board_likes ADD CONSTRAINT UID_BOARD_LIKES_PK_0 PRIMARY KEY (l_board, l_user);
ALTER TABLE board_likes ADD CONSTRAINT UID_BOARD_LIKES_FK_0 FOREIGN KEY (l_board) REFERENCES boards (b_idx) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE board_likes ADD CONSTRAINT UID_BOARD_LIKES_FK_1 FOREIGN KEY (l_user) REFERENCES users (u_id) ON UPDATE CASCADE ON DELETE CASCADE;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

* 사물함 Table

CREATE TABLE lockers
(
    `l_id`             INT             NOT NULL   PRIMARY KEY   AUTO_INCREMENT   COMMENT '사물함 번호',
    `l_state`          TINYINT(1)      NOT NULL                                  COMMENT '사물함 상태',
    `l_start_date`     TIMESTAMP       NULL                                      COMMENT '대여 시작일',
    `l_finish_date`    TIMESTAMP       NULL                                      COMMENT '대여 종료일',
    `l_user`           VARCHAR(20)     NULL                                      COMMENT '사물함 대여자'
);

ALTER TABLE lockers ADD CONSTRAINT UID_LOCKERS_FK_0 FOREIGN KEY (l_user) REFERENCES users (u_id) ON UPDATE CASCADE ON DELETE CASCADE;

INSERT INTO lockers (l_state) VALUES (0);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -